## Include
#parse("include/var_entity.vm")
## Use macro resolve header
#package($SRC)
## use macro for feed $haveCriteria
#haveCriteria()

import ${pack_entity}.${entityClass};
#if($haveCriteria)
import ${pack_criteria}.${criteriaClass};
#end
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

/**
 * Service interface for ${entityClass}.
 * $author
 */
public interface $serviceInterface {

#if($haveCriteria)
	/**
	 * Perform a pageable and filtered search.
	 * @param pageable pagination configuration
	 * @param criteria filters
	 * @return a page of $entityInstance
	 */
	public Page<$entityClass> search(Pageable pageable, $criteriaClass criteria);
#else
	/**
	 * Perform a pageable and filtered search.
	 * @param pageable pagination configuration
	 * @return a page of $entityInstance
	 */
	public Page<$entityClass> search(Pageable pageable);
#end
	/**
	 * Recover an $entityInstance following an id.
	 * @param id the given id
	 * @return the $entityInstance
	 */
	public $entityClass get($keyArgsListWrapperType);

	/**
	 * Perform an $entityInstance deletion.
	 * @param id the given id
	 * @return state of deletion (true if ok otherwise false)
	 */
	public Boolean delete($keyArgsListWrapperType);

	/**
	 * Perform an $entityInstance creation.
	 * @param $entityInstance to create
	 * @return created $entityInstance
	 */
	public $entityClass create($entityClass $entityInstance);

	/**
	 * Perform an $entityInstance update.
	 * @param $entityInstance to update
	 * @return state of update (true if ok otherwise false)
	 */
	public Boolean save($entityClass $entityInstance);

	/**
	 * Test $entityInstance existence.
	 * @param $entityInstance to check
	 * @return true if author exist otherwise false
	 */
	public Boolean exist($entityClass $entityInstance);
}
